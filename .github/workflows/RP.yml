# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of command runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
name: FreeRDP

on: workflow_dispatch

inputs:

      time:

        description: 'VM Time (Seconds, Maximum 72 hours)'

        required: true

        default: "21600"

        

jobs:

  build:

    runs-on: windows-latest

    timeout-minutes: 9999

    steps:

    - name: Downloading Ngrok.

      run: |

        Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip

        Invoke-WebRequest https://raw.githubusercontent.com/FDCI1337/FreeRDP2021/main/start.bat -OutFile start.bat

    - name: Extracting Ngrok Files.

      run: Expand-Archive ngrok.zip

    - name: Connecting to your Ngrok account.

      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN

      env:

        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Activating RDP access.

      run: | 

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0

        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Creating Tunnel.

      run: Start-Process Powershell -ArgumentList '-Noexit -Command ".\ngrok\ngrok.exe tcp 3389"'

    - name: Connecting to your RDP.

      run: cmd /c start.bat

    - name: For keep VM alive (1)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (2)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (3)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (4)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (5)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (6)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (7)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (8)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (9)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (10)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (11)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (12)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"name: FreeRDP

on: workflow_dispatch

inputs:

      time:

        description: 'VM Time (Seconds, Maximum 72 hours)'

        required: true

        default: "21600"

        

jobs:

  build:

    runs-on: windows-latest

    timeout-minutes: 9999

    steps:

    - name: Downloading Ngrok.

      run: |

        Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip

        Invoke-WebRequest https://raw.githubusercontent.com/FDCI1337/FreeRDP2021/main/start.bat -OutFile start.bat

    - name: Extracting Ngrok Files.

      run: Expand-Archive ngrok.zip

    - name: Connecting to your Ngrok account.

      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN

      env:

        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Activating RDP access.

      run: | 

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0

        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Creating Tunnel.

      run: Start-Process Powershell -ArgumentList '-Noexit -Command ".\ngrok\ngrok.exe tcp 3389"'

    - name: Connecting to your RDP.

      run: cmd /c start.bat

    - name: For keep VM alive (1)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (2)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (3)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (4)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (5)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (6)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (7)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (8)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (9)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (10)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (11)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (12)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"name: FreeRDP

on: workflow_dispatch

inputs:

      time:

        description: 'VM Time (Seconds, Maximum 72 hours)'

        required: true

        default: "21600"

        

jobs:

  build:

    runs-on: windows-latest

    timeout-minutes: 9999

    steps:

    - name: Downloading Ngrok.

      run: |

        Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip

        Invoke-WebRequest https://raw.githubusercontent.com/FDCI1337/FreeRDP2021/main/start.bat -OutFile start.bat

    - name: Extracting Ngrok Files.

      run: Expand-Archive ngrok.zip

    - name: Connecting to your Ngrok account.

      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN

      env:

        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Activating RDP access.

      run: | 

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0

        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Creating Tunnel.

      run: Start-Process Powershell -ArgumentList '-Noexit -Command ".\ngrok\ngrok.exe tcp 3389"'

    - name: Connecting to your RDP.

      run: cmd /c start.bat

    - name: For keep VM alive (1)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (2)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (3)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (4)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (5)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (6)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (7)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (8)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (9)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (10)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (11)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"

    - name: For keep VM alive (12)

      run: | 

        $vmtime = ${{ github.event.inputs.time }} / 12

        Start-Sleep -Seconds $vmtime

        echo "OK"
